#include <iostream>
class A
{
    public:
    
    A(int x= 0 ,int y = 0):a(x),b(y)
    {
        data = new int(x*y);
        std::cout<<"Constructor called"<<std::endl;
    }
    
    A(const A& other)
    {
        std::cout <<"Copy Constructor"<<std::endl;
        
        a = other.a;
        b= other.b;
        data = new int(*other.data);
    }
    
    A& operator = (const A& other)
    {
        std::cout<<"assign operator"<<std::endl;
        if(this!=&other)
        {
            delete data;
            data = nullptr;
            
            a=other.a;
            b= other.b;
            data = new int(*other.data);
            
        }
        return *this;
    }
    
    A(A&& other)noexcept
    {
        std::cout<<"Move Constructor"<<std::endl;
        
        a = other.a;
        b= other.b;
        data = other.data;
        
        other.data = nullptr;
        
    }    
    int getA()const
    {
        return a;
    }
    
    int getB()const
    {
        return b;
    }
    
void display() const
    {
    if (data != nullptr)
    {
        std::cout << a << "\t" << b << "\t" << *data << std::endl;
    } else 
    {
        std::cout << a << "\t" << b << "\t" << "[no data]" << std::endl;
    }
}

    private:
    
    int a;
    int b;
    int *data;
};

int main()
{
A objA;
objA.display();

A objB(100,200);
objB.display();

A copy(objB);
copy.display();

A assign(20,30);
assign.display();

copy = assign;

copy.display();

A mv = std::move(copy);
mv.display();

copy.display();


    return 0;
}
