/******************************************************************************

                              Online C++ Compiler.
               Code, Compile, Run and Debug C++ program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <iostream>
#include<string>

//implement queue using 2 stacks;

//means need to create enqueu dequeue peek empty functin for queue but it uses 2 stack.
//Menas need to cretae 

template <typename T>
class Customstack
{
public:

Customstack(int iSize = 10):
size(iSize)
{
    topStack = -1;
    if(size <=0)
    {
        iSize = 10;
    }
    
    stackAtd = new T[iSize];
    
    std::cout<<"cnstr"<<std::endl;
}

~Customstack()
{
    std::cout<<"desstr"<<std::endl;
    delete[] stackAtd;
}

void push(T x)
{
    if(topStack == (size-1))
    {
    throw std::out_of_range("Buffer Overflow");
    
    }
    
    stackAtd[++topStack] = x;
}

T pop()
{
    if(topStack == -1)
    throw std::out_of_range("Buffer underflow");
    
    T x = stackAtd[topStack];
    topStack--;
    return x;
}

bool isEmpty()
{
    return topStack== -1;
}

T top()
{
    if(topStack == -1)
    throw std::out_of_range("Buffer underflow");
    
    return stackAtd[topStack];
}
private:

int size;
int topStack;
T *stackAtd;




};

template <typename T>
class Queue2Stack
{
public:


Queue2Stack()
{
    std::cout<<"Cnstr"<<std::endl;
}
~Queue2Stack()
{
    std::cout<<"Destr"<<std::endl;
}

void enqueue(T x)
{
    s1.push(x);
}
void transferIfNeeded()
{
    if(s2.isEmpty())
    {
        if(!s1.isEmpty())
        {
            while(!s1.isEmpty())
            s2.push(s1.pop()); 
        }
        else
        {
            std::cout<<"S1 Empty"<<std::endl;
        }

        
    }
   
}
T dequeue()
{

transferIfNeeded();

    if (s2.isEmpty()) 
    {
    throw std::out_of_range("Queue is empty");
    } 
return s2.pop();
}

T peak()
{
    transferIfNeeded();

    if (s2.isEmpty()) 
    {
    throw std::out_of_range("Queue is empty");
    } 
    return s2.top();
}

bool isEmpty()
{
    return s1.isEmpty() && s2.isEmpty();
}

private:

Customstack<T> s1;
Customstack<T> s2;

    
};


int main()
{
Queue2Stack<int> q1;


q1.enqueue(1);
q1.enqueue(2);
q1.enqueue(3);
q1.enqueue(4);


while(!q1.isEmpty())
{
    std::cout<<q1.dequeue()<<std::endl;
}

    return 0;
}