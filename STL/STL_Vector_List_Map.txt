/******************************************************************************

                              Online C++ Compiler.
               Code, Compile, Run and Debug C++ program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <iostream>
#include <vector>
#include <algorithm>
#include <unordered_map>

int main()
{
std::vector<int>vec{5,4,3,2,1};

//Reverse the vector :


std::reverse(vec.begin(),vec.end());

for(auto i : vec)
{
    std::cout<<i<<"\t";
}

std::cout<<std::endl;


//2) Remove dupliates from vector
std::vector<int>objVecDup{5,4,2,3,6,4,5,3,5,2,1};

//std::sort is required because std::unique only removes consecutive duplicates.

std::sort(objVecDup.begin(),objVecDup.end());

objVecDup.erase(std::unique(objVecDup.begin(),objVecDup.end()),objVecDup.end());

for(auto i : objVecDup)
{
    std::cout<<i<<"\t";
}
std::cout<<std::endl;

//Rotate veector by k pos:

//rotate vector by left by 3.

//For right rotate we can use n-k at mid

std::rotate(vec.begin(),vec.begin()+3,vec.end());
for(auto i : vec)
{
    std::cout<<i<<"\t";
}
std::cout<<std::endl;
//Frequncy of eac elemnt

std::vector<int>objF{1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5};
std::unordered_map<int ,int>objFreq;

for(auto i : objF)
objFreq[i]++;

for(auto p: objFreq)
std::cout<<p.first<<"\t"<<p.second<<std::endl;

//sort a vecotr of pair by first element.

std::vector<std::pair<int,int>>objPair{{4,5},{1,2},{6,3},{2,7},{5,3},{7,8}};

std::sort(objPair.begin(),objPair.end());

std::cout<<"Pair data starts"<<std::endl;
for(auto i : objPair)
{
    std::cout<<i.first<<"\t"<<i.second<<std::endl;
}

std::sort(objPair.begin(),objPair.end(),[](auto &a,auto &b){return a.second< b.second;});

std::cout<<"Pair data starts seodn"<<std::endl;
for(auto i : objPair)
{
    std::cout<<i.first<<"\t"<<i.second<<std::endl;
}

//Remove negative numbers form array;

int a[] = {1,-3,-4,-5,3,4,5};

int n  = sizeof(a)/sizeof(a[0]);

std::vector<int>objNeg(a,a+n);

objNeg.erase(std::remove_if(objNeg.begin(),objNeg.end(),[](int x){return x<0;}),objNeg.end());

for(auto i : objNeg)
std::cout<<i<<"\t";


    return 0;
}